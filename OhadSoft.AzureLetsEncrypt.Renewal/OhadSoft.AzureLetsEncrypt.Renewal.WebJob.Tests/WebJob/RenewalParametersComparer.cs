using System;
using System.Collections.Generic;
using OhadSoft.AzureLetsEncrypt.Renewal.Management;

namespace OhadSoft.AzureLetsEncrypt.Renewal.WebJob.Tests.WebJob
{
    // Mostly generated by Resharper (alt+insert) - but note that URI comparisons are manual!
    public sealed class RenewalParametersComparer : IComparer<RenewalParameters>
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Comparer")]
        public int Compare(RenewalParameters x, RenewalParameters y)
        {
            if (ReferenceEquals(x, y)) return 0;
            if (ReferenceEquals(null, y)) return 1;
            if (ReferenceEquals(null, x)) return -1;
            var subscriptionIdComparison = x.SubscriptionId.CompareTo(y.SubscriptionId);
            if (subscriptionIdComparison != 0) return subscriptionIdComparison;
            var tenantIdComparison = string.Compare(x.TenantId, y.TenantId, StringComparison.Ordinal);
            if (tenantIdComparison != 0) return tenantIdComparison;
            var resourceGroupComparison = string.Compare(x.ResourceGroup, y.ResourceGroup, StringComparison.Ordinal);
            if (resourceGroupComparison != 0) return resourceGroupComparison;
            var webAppComparison = string.Compare(x.WebApp, y.WebApp, StringComparison.Ordinal);
            if (webAppComparison != 0) return webAppComparison;
            var emailComparison = string.Compare(x.Email, y.Email, StringComparison.Ordinal);
            if (emailComparison != 0) return emailComparison;
            var clientIdComparison = x.ClientId.CompareTo(y.ClientId);
            if (clientIdComparison != 0) return clientIdComparison;
            var clientSecretComparison = string.Compare(x.ClientSecret, y.ClientSecret, StringComparison.Ordinal);
            if (clientSecretComparison != 0) return clientSecretComparison;
            var servicePlanResourceGroupComparison = string.Compare(x.ServicePlanResourceGroup, y.ServicePlanResourceGroup, StringComparison.Ordinal);
            if (servicePlanResourceGroupComparison != 0) return servicePlanResourceGroupComparison;
            var siteSlotNameComparison = string.Compare(x.SiteSlotName, y.SiteSlotName, StringComparison.Ordinal);
            if (siteSlotNameComparison != 0) return siteSlotNameComparison;
            var groupNameComparison = string.Compare(x.GroupName, y.GroupName, StringComparison.Ordinal);
            if (groupNameComparison != 0) return groupNameComparison;
            var useIpBasedSslComparison = x.UseIpBasedSsl.CompareTo(y.UseIpBasedSsl);
            if (useIpBasedSslComparison != 0) return useIpBasedSslComparison;
            var rsaKeyLengthComparison = x.RsaKeyLength.CompareTo(y.RsaKeyLength);
            if (rsaKeyLengthComparison != 0) return rsaKeyLengthComparison;
            var acmeBaseUriComparison = String.Compare(x.AcmeBaseUri?.ToString(), y.AcmeBaseUri?.ToString(), StringComparison.Ordinal);
            if (acmeBaseUriComparison != 0) return acmeBaseUriComparison;
            var webRootPathComparison = string.Compare(x.WebRootPath, y.WebRootPath, StringComparison.Ordinal);
            if (webRootPathComparison != 0) return webRootPathComparison;
            var authenticationUriComparison = String.Compare(x.AuthenticationUri?.ToString(), y.AuthenticationUri?.ToString(), StringComparison.Ordinal);
            if (authenticationUriComparison != 0) return authenticationUriComparison;
            var azureTokenAudienceComparison = String.Compare(x.AzureTokenAudience?.ToString(), y.AzureTokenAudience?.ToString(), StringComparison.Ordinal);
            if (azureTokenAudienceComparison != 0) return azureTokenAudienceComparison;
            var azureManagementEndpointComparison = String.Compare(x.AzureManagementEndpoint?.ToString(), y.AzureManagementEndpoint?.ToString(), StringComparison.Ordinal);
            if (azureManagementEndpointComparison != 0) return azureManagementEndpointComparison;
            var renewXNumberOfDaysBeforeExpirationComparison = x.RenewXNumberOfDaysBeforeExpiration.CompareTo(y.RenewXNumberOfDaysBeforeExpiration);
            if (renewXNumberOfDaysBeforeExpirationComparison != 0) return renewXNumberOfDaysBeforeExpirationComparison;
            return string.Compare(x.AzureDefaultWebsiteDomainName, y.AzureDefaultWebsiteDomainName, StringComparison.Ordinal);
        }
    }
}